[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "akasha"
version = "0.1.0"
description = "A state-of-the-art, modular, local-first multimodal RAG system for research and academic workflows"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Akasha Team", email = "team@akasha.ai"},
]
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Indexing",
]
dependencies = [
    # Core Framework
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    
    # Data Validation & Serialization
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Configuration
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",
    
    # Async & Networking
    "aiohttp>=3.9.1",
    "aiofiles>=23.2.1",
    "asyncio-mqtt>=0.16.1",
    "websockets>=12.0",
    
    # Database & Storage
    "sqlalchemy[asyncio]>=2.0.23",
    "alembic>=1.13.1",
    "redis>=5.0.1",
    
    # ML & Vector Processing (Phase 2 preparation)
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    
    # Logging & Monitoring
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    
    # Security
    "cryptography>=41.0.7",
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
    
    # Utilities
    "python-dateutil>=2.8.2",
    "click>=8.1.7",
    "rich>=13.7.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.2",  # For testing FastAPI
    "psutil>=5.9.0",  # For system monitoring in tests
    "black>=23.11.0",
    "isort>=5.13.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
]

# ML dependencies (Phase 2)
ml = [
    "torch>=2.1.0",
    "transformers>=4.36.0",
    "sentence-transformers>=2.2.2",
    "chromadb>=0.4.18",
    "qdrant-client>=1.7.0",
]

# Document processing dependencies (Phase 2)
docs = [
    "pypdf2>=3.0.1",
    "python-magic>=0.4.27",
    "pillow>=10.1.0",
    "opencv-python>=4.8.1",
]

# Apple Silicon MLX dependencies
apple = [
    "mlx>=0.0.9",
    "mlx-lm>=0.0.8",
]

# All dependencies
all = [
    "akasha[dev,ml,docs,apple]"
]

[project.urls]
Homepage = "https://github.com/akasha-ai/akasha"
Documentation = "https://docs.akasha.ai"
Repository = "https://github.com/akasha-ai/akasha"
"Bug Tracker" = "https://github.com/akasha-ai/akasha/issues"

[project.scripts]
akasha = "src.api.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["akasha"]

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=src --cov-report=term-missing"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "qdrant_client.*",
    "mlx.*",
    "transformers.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]